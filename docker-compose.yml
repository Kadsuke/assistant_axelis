version: "3.8"

services:
  # Base de donn√©es PostgreSQL pour conversations
  postgres-conversations:
    image: postgres:15
    container_name: coris-postgres-conversations
    environment:
      POSTGRES_DB: coris_conversations
      POSTGRES_USER: coris_conv_user
      POSTGRES_PASSWORD: coris_conv_password
    volumes:
      - postgres_conversations_data:/var/lib/postgresql/data
      - ./scripts/sql/init_conversations.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    networks:
      - coris-network
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready -U coris_conv_user -d coris_conversations"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis pour cache et sessions
  redis:
    image: redis:7-alpine
    container_name: coris-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - coris-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Application principale
  coris-assistant:
    build: .
    container_name: coris-assistant-api
    environment:
      # OpenAI
      - OPENAI_API_KEY=${OPENAI_API_KEY}

      # Base conversations (conteneur local)
      - CONVERSATIONS_HOST=postgres-conversations
      - CONVERSATIONS_PORT=5432
      - CONVERSATIONS_DB=coris_conversations
      - CONVERSATIONS_USER=coris_conv_user
      - CONVERSATIONS_PASSWORD=coris_conv_password

      # Bases existantes (vos vraies credentials)
      - DATAWAREHOUSE_HOST=${DATAWAREHOUSE_HOST}
      - DATAWAREHOUSE_PORT=${DATAWAREHOUSE_PORT}
      - DATAWAREHOUSE_DB=${DATAWAREHOUSE_DB}
      - DATAWAREHOUSE_USER=${DATAWAREHOUSE_USER}
      - DATAWAREHOUSE_PASSWORD=${DATAWAREHOUSE_PASSWORD}

      - RECLAMATIONS_HOST=${RECLAMATIONS_HOST}
      - RECLAMATIONS_PORT=${RECLAMATIONS_PORT}
      - RECLAMATIONS_DB=${RECLAMATIONS_DB}
      - RECLAMATIONS_USER=${RECLAMATIONS_USER}
      - RECLAMATIONS_PASSWORD=${RECLAMATIONS_PASSWORD}

      # ChromaDB
      - CHROMADB_PERSIST_DIRECTORY=/app/data/chroma_data

      # Configuration app
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
      - API_HOST=0.0.0.0
      - API_PORT=8000

      # Redis
      - REDIS_URL=redis://redis:6379

    volumes:
      - ./data:/app/data
      - ./knowledge_bases:/app/knowledge_bases
      - ./configs:/app/configs
    ports:
      - "8000:8000"
    depends_on:
      postgres-conversations:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - coris-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: coris-nginx
    volumes:
      - ./configs/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./configs/nginx/default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - coris-assistant
    networks:
      - coris-network
    restart: unless-stopped

  # Monitoring avec Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: coris-prometheus
    volumes:
      - ./configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
    ports:
      - "9090:9090"
    networks:
      - coris-network

  # Dashboard avec Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: coris-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./configs/grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - coris-network

volumes:
  postgres_conversations_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  coris-network:
    driver: bridge
