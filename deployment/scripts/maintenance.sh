#!/bin/bash

# Script de maintenance Coris Intelligent Assistant
set -e

COMMAND=${1:-help}
BACKUP_DIR="/opt/coris/backups"
LOG_DIR="/opt/coris/logs"

case $COMMAND in
    "backup")
        echo "üíæ Sauvegarde compl√®te du syst√®me..."
        BACKUP_FILE="$BACKUP_DIR/coris_backup_$(date +%Y%m%d_%H%M%S).tar.gz"
        
        # Cr√©er le r√©pertoire de sauvegarde
        mkdir -p "$BACKUP_DIR"
        
        # Sauvegarde base de donn√©es
        echo "   üìÑ Sauvegarde base conversations..."
        docker exec coris-postgres-prod pg_dump -U $CONVERSATIONS_USER coris_conversations > "$BACKUP_DIR/conversations_$(date +%Y%m%d).sql"
        
        # Sauvegarde ChromaDB
        echo "   üìö Sauvegarde ChromaDB..."
        tar -czf "$BACKUP_DIR/chroma_$(date +%Y%m%d).tar.gz" -C /opt/coris/data chroma_data
        
        # Sauvegarde configuration
        echo "   ‚öôÔ∏è Sauvegarde configuration..."
        tar -czf "$BACKUP_FILE" \
            /opt/coris/data \
            /opt/coris/knowledge_bases \
            "$BACKUP_DIR/conversations_$(date +%Y%m%d).sql" \
            "$BACKUP_DIR/chroma_$(date +%Y%m%d).tar.gz"
        
        echo "‚úÖ Sauvegarde termin√©e: $BACKUP_FILE"
        
        # Nettoyage des anciennes sauvegardes (garder 7 jours)
        find "$BACKUP_DIR" -name "coris_backup_*.tar.gz" -mtime +7 -delete
        ;;
        
    "restore")
        BACKUP_FILE=${2}
        if [ -z "$BACKUP_FILE" ]; then
            echo "‚ùå Usage: $0 restore <backup_file>"
            exit 1
        fi
        
        echo "üîÑ Restauration depuis: $BACKUP_FILE"
        
        # Arr√™ter les services
        docker-compose -f deployment/docker/docker-compose.prod.yml down
        
        # Restaurer les donn√©es
        tar -xzf "$BACKUP_FILE" -C /
        
        # Red√©marrer les services
        docker-compose -f deployment/docker/docker-compose.prod.yml up -d
        
        echo "‚úÖ Restauration termin√©e"
        ;;
        
    "logs")
        SERVICE=${2:-coris-assistant}
        echo "üìã Logs du service: $SERVICE"
        docker-compose logs -f --tail=100 "$SERVICE"
        ;;
        
    "status")
        echo "üìä Statut des services Coris Assistant"
        echo "======================================"
        
        # Statut Docker
        docker-compose ps
        
        # V√©rification API
        if curl -f http://localhost/api/v1/health > /dev/null 2>&1; then
            echo "‚úÖ API: Op√©rationnelle"
        else
            echo "‚ùå API: Hors service"
        fi
        
        # V√©rification base de donn√©es
        if docker exec coris-postgres-prod pg_isready -U $CONVERSATIONS_USER > /dev/null 2>&1; then
            echo "‚úÖ Base de donn√©es: Op√©rationnelle"
        else
            echo "‚ùå Base de donn√©es: Hors service"
        fi
        
        # M√©triques syst√®me
        echo ""
        echo "üìà M√©triques (derni√®res 24h):"
        curl -s http://localhost/api/v1/metrics | jq '.conversations.total_24h' | xargs echo "   Conversations:"
        curl -s http://localhost/api/v1/metrics | jq '.escalations.total_24h' | xargs echo "   Escalades:"
        ;;
        
    "update")
        echo "üîÑ Mise √† jour du syst√®me..."
        
        # Sauvegarde avant mise √† jour
        $0 backup
        
        # Pull des nouvelles images
        docker-compose -f deployment/docker/docker-compose.prod.yml pull
        
        # Rebuild et red√©marrage
        docker-compose -f deployment/docker/docker-compose.prod.yml up -d --build
        
        # V√©rification post-mise √† jour
        sleep 30
        $0 status
        
        echo "‚úÖ Mise √† jour termin√©e"
        ;;
        
    "cleanup")
        echo "üßπ Nettoyage du syst√®me..."
        
        # Nettoyage Docker
        docker system prune -f
        docker volume prune -f
        
        # Nettoyage logs (garder 30 jours)
        find "$LOG_DIR" -name "*.log" -mtime +30 -delete
        
        # Nettoyage base conversations (supprimer conversations > 90 jours)
        docker exec coris-postgres-prod psql -U $CONVERSATIONS_USER -d coris_conversations -c "
            DELETE FROM messages WHERE conversation_id IN (
                SELECT id FROM conversations WHERE created_at < NOW() - INTERVAL '90 days'
            );
            DELETE FROM conversations WHERE created_at < NOW() - INTERVAL '90 days';
        "
        
        echo "‚úÖ Nettoyage termin√©"
        ;;
        
    "monitor")
        echo "üìä Monitoring en temps r√©el..."
        echo "Ctrl+C pour arr√™ter"
        
        while true; do
            clear
            echo "=== Coris Assistant Monitoring - $(date) ==="
            echo ""
            
            # Statut des conteneurs
            echo "üê≥ Conteneurs:"
            docker-compose ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}"
            
            echo ""
            echo "üìà M√©triques:"
            
            # CPU et M√©moire
            docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}" | head -4
            
            echo ""
            echo "üí¨ Conversations actives:"
            curl -s http://localhost/api/v1/metrics | jq '.conversations.total_24h' | xargs echo "   Derni√®res 24h:"
            
            echo ""
            echo "‚ö° Temps de r√©ponse moyen:"
            curl -s http://localhost/api/v1/metrics | jq '.performance.avg_tokens_per_message' | xargs echo "   Tokens/message:"
            
            sleep 10
        done
        ;;
        
    "security")
        echo "üîí V√©rification s√©curit√©..."
        
        # V√©rifier les mots de passe par d√©faut
        if grep -q "admin123" /opt/coris/configs/grafana/datasources.yml; then
            echo "‚ö†Ô∏è Mot de passe Grafana par d√©faut d√©tect√©"
        fi
        
        # V√©rifier les permissions des fichiers
        if [ "$(stat -c %a /opt/coris/data)" != "750" ]; then
            echo "‚ö†Ô∏è Permissions du r√©pertoire data incorrectes"
            chmod 750 /opt/coris/data
        fi
        
        # V√©rifier les certificats SSL
        if [ ! -f "/opt/coris/ssl/cert.pem" ]; then
            echo "‚ö†Ô∏è Certificat SSL manquant"
        fi
        
        echo "‚úÖ V√©rification s√©curit√© termin√©e"
        ;;
        
    "help"|*)
        echo "üõ†Ô∏è Script de maintenance Coris Intelligent Assistant"
        echo ""
        echo "Usage: $0 <command> [options]"
        echo ""
        echo "Commandes disponibles:"
        echo "  backup                 - Sauvegarde compl√®te du syst√®me"
        echo "  restore <file>         - Restauration depuis une sauvegarde"
        echo "  logs [service]         - Affichage des logs"
        echo "  status                 - Statut des services"
        echo "  update                 - Mise √† jour du syst√®me"
        echo "  cleanup                - Nettoyage des donn√©es anciennes"
        echo "  monitor                - Monitoring en temps r√©el"
        echo "  security               - V√©rification s√©curit√©"
        echo "  help                   - Affichage de cette aide"
        echo ""
        echo "Exemples:"
        echo "  $0 backup"
        echo "  $0 logs coris-assistant"
        echo "  $0 restore /opt/coris/backups/coris_backup_20241201_120000.tar.gz"
        ;;
esac